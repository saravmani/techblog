"use strict";(self.webpackChunkmyblog=self.webpackChunkmyblog||[]).push([[8883],{3905:function(e,r,t){t.d(r,{Zo:function(){return u},kt:function(){return f}});var o=t(7294);function n(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function a(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?a(Object(t),!0).forEach((function(r){n(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function c(e,r){if(null==e)return{};var t,o,n=function(e,r){if(null==e)return{};var t,o,n={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],r.indexOf(t)>=0||(n[t]=e[t]);return n}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var l=o.createContext({}),m=function(e){var r=o.useContext(l),t=r;return e&&(t="function"==typeof e?e(r):i(i({},r),e)),t},u=function(e){var r=m(e.components);return o.createElement(l.Provider,{value:r},e.children)},s={inlineCode:"code",wrapper:function(e){var r=e.children;return o.createElement(o.Fragment,{},r)}},p=o.forwardRef((function(e,r){var t=e.components,n=e.mdxType,a=e.originalType,l=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),p=m(t),f=n,d=p["".concat(l,".").concat(f)]||p[f]||s[f]||a;return t?o.createElement(d,i(i({ref:r},u),{},{components:t})):o.createElement(d,i({ref:r},u))}));function f(e,r){var t=arguments,n=r&&r.mdxType;if("string"==typeof e||n){var a=t.length,i=new Array(a);i[0]=p;var c={};for(var l in r)hasOwnProperty.call(r,l)&&(c[l]=r[l]);c.originalType=e,c.mdxType="string"==typeof e?e:n,i[1]=c;for(var m=2;m<a;m++)i[m]=t[m];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}p.displayName="MDXCreateElement"},7961:function(e,r,t){t.r(r),t.d(r,{frontMatter:function(){return c},contentTitle:function(){return l},metadata:function(){return m},toc:function(){return u},default:function(){return p}});var o=t(7462),n=t(3366),a=(t(7294),t(3905)),i=["components"],c={},l="Microservices - gRPC Communication",m={unversionedId:"DotNetCore/EntityFrameworkCORE/MicroServices-Communication-GRPC",id:"DotNetCore/EntityFrameworkCORE/MicroServices-Communication-GRPC",title:"Microservices - gRPC Communication",description:"gRPC is a high-performance, open source, universal RPC framework from Google",source:"@site/docs/DotNetCore/EntityFrameworkCORE/MicroServices-Communication-GRPC.md",sourceDirName:"DotNetCore/EntityFrameworkCORE",slug:"/DotNetCore/EntityFrameworkCORE/MicroServices-Communication-GRPC",permalink:"/techblog/docs/DotNetCore/EntityFrameworkCORE/MicroServices-Communication-GRPC",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/DotNetCore/EntityFrameworkCORE/MicroServices-Communication-GRPC.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"What is Shadow Property Foreign Key in Entity Framework Core",permalink:"/techblog/docs/DotNetCore/EntityFrameworkCORE/Entity-framework-core-shadow-property-foreign-key"},next:{title:"Steps to use SQLite with Entity Framework Core - A quick start guide",permalink:"/techblog/docs/DotNetCore/EntityFrameworkCORE/Sqlite-entity-framework-core-quick-start"}},u=[{value:"gRPC is a high-performance, open source, universal RPC framework from Google",id:"grpc-is-a-high-performance-open-source-universal-rpc-framework-from-google",children:[],level:6},{value:"Example implementation of GRPC in MicroServices",id:"example-implementation-of-grpc-in-microservices",children:[],level:6},{value:"Protobuf Format",id:"protobuf-format",children:[{value:"Kestrel Configuration",id:"kestrel-configuration",children:[],level:6}],level:5}],s={toc:u};function p(e){var r=e.components,t=(0,n.Z)(e,i);return(0,a.kt)("wrapper",(0,o.Z)({},s,t,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"microservices---grpc-communication"},"Microservices - gRPC Communication"),(0,a.kt)("h6",{id:"grpc-is-a-high-performance-open-source-universal-rpc-framework-from-google"},"gRPC is a high-performance, open source, universal RPC framework from Google"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"gRPC is a modern open source high performance Remote Procedure Call (RPC) framework that can run in any environment")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("em",{parentName:"p"},"Note: An alternate for GRPC can be REST"),"\n",(0,a.kt)("em",{parentName:"p"},"REST is Text based and it not having standard API contract. So every client have to write their client libraries"),"\n",(0,a.kt)("em",{parentName:"p"},"GRPC is binary protocol"))),(0,a.kt)("p",null,"GRPC is implemented on top of HTTP/2 and Protocol buffer."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("em",{parentName:"p"},"HTTP/2 is mandatory"))),(0,a.kt)("p",null,"GRPC is highly recomended for Internal Microservices Communication. Because it is more efficient, low latency."),(0,a.kt)("p",null,"When we build multiple microservices with different technologies and programming languages, it is important to have a standard way to define service interfaces and underlying message interchange formats.\n",(0,a.kt)("img",{parentName:"p",src:"https://grpc.io/img/landing-2.svg",alt:null})),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Can push the data"),(0,a.kt)("li",{parentName:"ul"},"Real time communicaiton"),(0,a.kt)("li",{parentName:"ul"},"Different programming languages can communicate",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("blockquote",{parentName:"li"},(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("em",{parentName:"p"},"Note: Official support avaliable for  .Net Core, Net 4.5+"))))))),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://grpc.io/docs/what-is-grpc/introduction/"},"Refer official documentation for GRPC")),(0,a.kt)("h6",{id:"example-implementation-of-grpc-in-microservices"},"Example implementation of GRPC in MicroServices"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-mermaid"},"flowchart LR\n  A(Microservice1 - With GRPC Server)\n  B(Microservice12 - With GRPC Server)\n  C(Aggregator - With GRPC Client)\n  D(Api Gateway)\n  E[End User]\n\nsubgraph MicroServices\n  A\n  B\nend\nE--\x3eD\nD --\x3e C\n\nC --\x3e A\nC --\x3e B\n")),(0,a.kt)("h5",{id:"protobuf-format"},"Protobuf Format"),(0,a.kt)("p",null,"Protocol Buffers is a free and open-source cross-platform data format used to serialize structured data.\ngRPC uses Protobuf Language for Communication. Protobuf is a mechanism for serializing structured data in a standard way. When compare to other formats (JSON, XML) Protobuf is smaller, faster"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://developers.google.com/protocol-buffers/docs/proto3"},"Refer official documentation for Protobuf syntax")),(0,a.kt)("h6",{id:"kestrel-configuration"},"Kestrel Configuration"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},"'Kestrel': {\n    'EndpointDefaults': {\n      'Protocols': 'Http2'\n    }\n\"\n")))}p.isMDXComponent=!0}}]);