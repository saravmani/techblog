"use strict";(self.webpackChunkmyblog=self.webpackChunkmyblog||[]).push([[899],{3905:function(e,t,o){o.d(t,{Zo:function(){return u},kt:function(){return p}});var r=o(7294);function n(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function i(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,r)}return o}function l(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?i(Object(o),!0).forEach((function(t){n(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):i(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function a(e,t){if(null==e)return{};var o,r,n=function(e,t){if(null==e)return{};var o,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)o=i[r],t.indexOf(o)>=0||(n[o]=e[o]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)o=i[r],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(n[o]=e[o])}return n}var c=r.createContext({}),s=function(e){var t=r.useContext(c),o=t;return e&&(o="function"==typeof e?e(t):l(l({},t),e)),o},u=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},g={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var o=e.components,n=e.mdxType,i=e.originalType,c=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),d=s(o),p=n,f=d["".concat(c,".").concat(p)]||d[p]||g[p]||i;return o?r.createElement(f,l(l({ref:t},u),{},{components:o})):r.createElement(f,l({ref:t},u))}));function p(e,t){var o=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=o.length,l=new Array(i);l[0]=d;var a={};for(var c in t)hasOwnProperty.call(t,c)&&(a[c]=t[c]);a.originalType=e,a.mdxType="string"==typeof e?e:n,l[1]=a;for(var s=2;s<i;s++)l[s]=o[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,o)}d.displayName="MDXCreateElement"},3218:function(e,t,o){o.r(t),o.d(t,{frontMatter:function(){return a},contentTitle:function(){return c},metadata:function(){return s},toc:function(){return u},default:function(){return d}});var r=o(7462),n=o(3366),i=(o(7294),o(3905)),l=["components"],a={sidebar_position:6,draft:!0,exclude:!0},c="Log SQL Queries in EntityFramework Core ss teswt",s={unversionedId:"DotNet/EntityFrameworkCORE/Entity-framework-core-log-sql-query-to-file",id:"DotNet/EntityFrameworkCORE/Entity-framework-core-log-sql-query-to-file",title:"Log SQL Queries in EntityFramework Core ss teswt",description:"Steps to add logging mechanism to EF Core project to log SQL queries to console/ file/ debug window",source:"@site/docs/DotNet/EntityFrameworkCORE/Entity-framework-core-log-sql-query-to-file.md",sourceDirName:"DotNet/EntityFrameworkCORE",slug:"/DotNet/EntityFrameworkCORE/Entity-framework-core-log-sql-query-to-file",permalink:"/techblog/docs/DotNet/EntityFrameworkCORE/Entity-framework-core-log-sql-query-to-file",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/DotNet/EntityFrameworkCORE/Entity-framework-core-log-sql-query-to-file.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6,draft:!0,exclude:!0},sidebar:"tutorialSidebar",previous:{title:"Tutorial Intro",permalink:"/techblog/docs/intro"},next:{title:"Sqlite-entity-framework-core-quick-start",permalink:"/techblog/docs/DotNet/EntityFrameworkCORE/Sqlite-entity-framework-core-quick-start"}},u=[{value:"Steps to add logging mechanism to EF Core project to log SQL queries to console/ file/ debug window",id:"steps-to-add-logging-mechanism-to-ef-core-project-to-log-sql-queries-to-console-file-debug-window",children:[],level:6},{value:"Full DbContext Class Code with logging",id:"full-dbcontext-class-code-with-logging",children:[],level:6}],g={toc:u};function d(e){var t=e.components,o=(0,n.Z)(e,l);return(0,i.kt)("wrapper",(0,r.Z)({},g,o,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"log-sql-queries-in-entityframework-core-ss-teswt"},"Log SQL Queries in EntityFramework Core ss teswt"),(0,i.kt)("h6",{id:"steps-to-add-logging-mechanism-to-ef-core-project-to-log-sql-queries-to-console-file-debug-window"},"Steps to add logging mechanism to EF Core project to log SQL queries to console/ file/ debug window"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Install nuget package  - Microsoft.Extensions.Logging")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-powershell"},"PM> Microsoft.Extensions.Logging #test\n")),(0,i.kt)("ol",{start:2},(0,i.kt)("li",{parentName:"ol"},"In DbContext class add below code to create logger factory")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"}," public static readonly ILoggerFactory objLoggerFactory = LoggerFactory.Create(builder => { builder.AddConsole(); });\n")),(0,i.kt)("ol",{start:3},(0,i.kt)("li",{parentName:"ol"},"Configure LoggerFactory in OnConfiguration method of dbcontext class")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n{\n  optionsBuilder.UseLoggerFactory(objLoggerFactory);\n  //.. Other configurations\n}\n")),(0,i.kt)("hr",null),(0,i.kt)("h6",{id:"full-dbcontext-class-code-with-logging"},"Full DbContext Class Code with logging"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'public class MyDbContext : DbContext\n  {\n      public DbSet<UserDetail> UserDetails { get; set; } // DB Model\n      public static readonly ILoggerFactory objLoggerFactory = LoggerFactory.Create(builder => { builder.AddConsole(); });\n      protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n      {\n          optionsBuilder.UseLoggerFactory(objLoggerFactory);\n          optionsBuilder.UseSqlite(@"Data Source=DBLayer\\MyDB.db");\n          base.OnConfiguring(optionsBuilder);\n      }\n  }\n')))}d.isMDXComponent=!0}}]);